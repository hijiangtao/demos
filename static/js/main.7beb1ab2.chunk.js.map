{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["WINDOW_WIDTH","window","innerWidth","WINDOW_HEIGHT","innerHeight","App","detectFrame","video","model","detect","then","predictions","_this","renderPredictions","requestAnimationFrame","ctx","document","getElementById","getContext","clearRect","canvas","width","height","font","textBaseline","forEach","prediction","x","bbox","y","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","class","textHeight","parseInt","fillRect","fillText","_this2","this","webCamPromise","navigator","mediaDevices","getUserMedia","audio","facingMode","stream","srcObject","Promise","resolve","reject","onloadedmetadata","play","modelPromise","cocoSsd","all","values","console","log","react_default","a","createElement","Fragment","href","style","position","right","cursor","bottom","id","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7beb1ab2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\nimport \"@tensorflow/tfjs\";\n\nconst [WINDOW_WIDTH, WINDOW_HEIGHT] = [window.innerWidth - 20, window.innerHeight - 110];\n\nclass App extends Component {\n  componentDidMount() {\n    const video = document.getElementById(\"video\");\n    const webCamPromise = navigator.mediaDevices\n      .getUserMedia({\n        audio: false,\n        video: {\n          facingMode: \"user\",\n          width: WINDOW_WIDTH,\n          height: WINDOW_HEIGHT\n        }\n      })\n      .then(stream => {\n        video.srcObject = stream;\n        return new Promise((resolve, reject) => {\n          video.onloadedmetadata = () => {\n            video.play();\n            resolve();\n          };\n        });\n      });\n    const modelPromise = cocoSsd.load();\n    Promise.all([modelPromise, webCamPromise]).then(values => {\n      console.log('Model Loaded.');\n      this.detectFrame(video, values[0]);\n    });\n  }\n\n  detectFrame = (video, model) => {\n    model.detect(video).then(predictions => {\n      this.renderPredictions(predictions);\n      requestAnimationFrame(() => {\n        this.detectFrame(video, model);\n      });\n    });\n  };\n\n  renderPredictions = predictions => {\n    const c = document.getElementById(\"canvas\");\n    const ctx = c.getContext(\"2d\");\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    // Font options.\n    const font = \"16px sans-serif\";\n    ctx.font = font;\n    ctx.textBaseline = \"top\";\n    predictions.forEach(prediction => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      const width = prediction.bbox[2];\n      const height = prediction.bbox[3];\n      // Draw the bounding box.\n      ctx.strokeStyle = \"#00FFFF\";\n      ctx.lineWidth = 4;\n      ctx.strokeRect(x, y, width, height);\n      // Draw the label background.\n      ctx.fillStyle = \"#00FFFF\";\n      const textWidth = ctx.measureText(prediction.class).width;\n      const textHeight = parseInt(font, 10); // base 10\n      ctx.fillRect(x, y, textWidth + 4, textHeight + 4);\n    });\n\n    predictions.forEach(prediction => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      // Draw the text last to ensure it's on top.\n      ctx.fillStyle = \"#000000\";\n      ctx.fillText(prediction.class, x, y);\n    });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <h3>Tnesorflow.js 实时物体检测 Demo</h3>\n        <p>完整 demo 见 <a href='https://hijiangtao.github.io/slides/s-Fliggy/1221-5min.html#/'>Slides</a>。</p>\n        <small style={{\n          position: 'fixed',\n          right: '5px',\n          cursor: 'pointer',\n          bottom: '5px',\n        }}><a href='https://hijiangtao.js.org/'>hijiangtao.js.org</a></small>\n        <video id=\"video\" width={WINDOW_WIDTH} height={WINDOW_HEIGHT} />\n        <canvas id=\"canvas\" width={WINDOW_WIDTH} height={WINDOW_HEIGHT} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}